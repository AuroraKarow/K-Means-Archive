#include "fstream"
#include "sstream"

std::list<std::string> split_string(std::string string_value, char cond_syb){
    std::list<std::string> str_list;
    bool punc_syb = true;
    std::string elem = "";
    for(auto temp : string_value){
        if(temp==cond_syb){
            if(punc_syb)continue;
            else{
                str_list.push_back(elem);
                elem = "";
                punc_syb = true;
            }
        }else {
            punc_syb = false;
            elem.push_back(temp);
        }
    } if(elem.length()) str_list.push_back(elem);
    return str_list;
}
std::string parse_table(std::string file_path){
    std::ifstream in(file_path);
    if (! in.is_open()){
        std::cout << "Error opening file";
        in.close();
        return " ";
    }else{
        std::stringstream buffer;
        buffer << in.rdbuf();
        std::string dat(buffer.str());
        in.close();
        return dat;
    }
}
std::list<std::string> parse_line_strings(std::string strings){
    std::list<std::string> out;
    std::string elem = "";
    for(int i=0; i<strings.length(); i++){
        char temp = strings.at(i);
        char next_temp = ' ';
        if(i+1 != strings.length()) next_temp = strings.at(i+1);
        else next_temp = ' ';
        if(temp!=' ' && temp!='\t' && temp!='\n' && temp!='\0') elem.push_back(temp);
        else if(next_temp==' ' || next_temp=='\t' || next_temp=='\n' || temp=='\0') continue;
        else{
            out.push_back(elem);
            elem = "";
        }
    }out.push_back(elem);
    return out;
}
// Output CSV file
template <typename T> void output_table(std::list<std::list<T>>output_strings, std::string file_path){
    std::ofstream oFile;
    oFile.open(file_path,std::ios::out|std::ios::trunc);
    for(auto line_temp : output_strings){
        for(auto col_temp : line_temp) oFile << col_temp << ',';
        oFile << std::endl;
    }oFile.close();
}
// Input CSV file
std::list<std::list<std::string>> input_table(std::string file_path){
    auto tab_str = parse_table(file_path);
    auto line_list = split_string(tab_str, '\n');
    std::list<std::list<std::string>> struct_tab;
    for(auto line_temp : line_list){
        auto tab_list = split_string(line_temp, ',');
        struct_tab.push_back(tab_list);
    }return struct_tab;
}